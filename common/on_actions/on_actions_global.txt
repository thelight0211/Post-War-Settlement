### GLOBAL ON ACTIONS FILE ###
### COUNTRY-SPECIFIC ACTIONS SHOULD GO INTO THEIR OWN FILES ###
### DON'T EDIT THIS FILE WITHOUT CHECKING IN THE CODING CHANNEL FIRST ###

on_actions = {
	on_startup = {
		effect = {
			every_state = {
				limit = {
					is_core_of = SOV 
					is_on_continent = asia
					NOT = { 
						OR = {
							region = 137
							region = 133
							region = 150
							region = 264
							region = 40
							region = 138
							region = 136
							region = 135
							region = 270
							region = 268
							region = 267
							region = 269
						}
					}
				}
			SIB = { add_state_core = PREV }
			}
		}
	}
}
on_actions = {

	#ROOT is winner, FROM is loser (called for all winners against all losers)
	on_peaceconference_started = {
		effect = {
			log = "[GetDateText] on_peaceconference_started ROOT = [Root.GetName] FROM = [From.GetName]"

			#set up PC country arrays
			if = {
				limit = { NOT = { has_global_flag = KR_set_up_pc_arrays } }
				set_global_flag = KR_set_up_pc_arrays
				every_country = {
					limit = { pc_is_winner = yes }
					add_to_array = { global.pc_winners_array = THIS }
					if = {
						limit = { is_major = yes }
						set_global_flag = pc_has_major_winner
					}
					if = {
						limit = { is_subject = no }
						set_global_flag = pc_has_non_subject_winner
					}
				}
				every_country = {
					limit = { pc_is_loser = yes }
					add_to_array = { global.pc_losers_array = THIS }
				}
			}
		}
	}

	#ROOT is winner #FROM is loser
	on_peaceconference_ended = {
		effect = {
			log = "[GetDateText] on_peaceconference_ended ROOT = [Root.GetName] FROM = [From.GetName]"

			#post-PC data cleanup
			if = {
				limit = {
					set_temp_variable = { last_winner_index = global.pc_winners_array^num }
					subtract_from_temp_variable = { last_winner_index = 1 }
					check_variable = { global.pc_winners_array^last_winner_index = ROOT }

					set_temp_variable = { last_loser_index = global.pc_losers_array^num }
					subtract_from_temp_variable = { last_loser_index = 1 }
					check_variable = { global.pc_losers_array^last_loser_index = FROM }
				}
				clr_global_flag = KR_set_up_pc_arrays
				clr_global_flag = pc_has_major_winner
				clr_global_flag = pc_has_non_subject_winner
				clear_array = global.pc_winners_array
				clear_array = global.pc_losers_array
			}


			### transfer impassables to the correct targets
			for_each_scope_loop = {
				array = global.paired_impassable_states
				if = {
					limit = { NOT = { is_owned_by = var:paired_impassable:owner } }
					transfer_state_to = paired_impassable:owner
				}
			}

			### civil war tags should always annex each other
			if = {
				limit = {
					FROM = {
						exists = yes #so that we don't keep checking this for every winner-loser pair
						has_capitulated = yes
					}
				}
				if = {
					limit = {
						OR = {
							#
							AND = {
								tag = POR
							}
							AND = {
								OR = {
									tag = SPF
									tag = SPM
									tag = SPR
									tag = SPA
								}	
								FROM = {
									OR = {
										tag = SPF
										tag = SPM
										tag = SPR
										tag = SPA
									} 
								}
							}
						}
					}
					annex_country = { target = FROM transfer_troops = yes }
				}
			}
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			### Fixing state control when occupying occupied territory
			if = {
				limit = {
					FROM.FROM = {
						owner = {
							NOT = { tag = ROOT }
							OR = {
								is_in_faction_with = ROOT
								is_subject_of = ROOT
								has_subject = ROOT
							}
						}
					}
				}
				FROM.FROM = { set_state_controller_to = owner }
			}
		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			# Fixes for vanilla bugs
			FROM = {
				every_enemy_country = {
					limit = {
						if = {
							limit = { is_subject = yes }
							overlord = { tag = faction_leader }
						}
						is_in_faction = yes
						is_faction_leader = no
						NOT = {
							faction_leader = { has_war_with = PREV.PREV }
						}
					}
					faction_leader = { save_event_target_as = factionhead }
					log = "--- [This.GetName] is in a war with [From.GetName] but their faction leader [factionhead.GetName] is not"
					country_event = { id = kr.political.208 hours = 1 }
					leave_faction = yes
				}
			}
			if = {
				limit = { is_faction_leader = yes }
				every_country = {
					limit = { is_ally_with = ROOT }
					every_controlled_state = {
						limit = {
							owner = {
								NOT = { has_war_with = ROOT }
							}
						}
						set_state_controller_to = owner
					}
				}
			}

			# double-checking exile system
		#	if = {
		#		limit = {
		#			OR = {
		#				is_in_faction = yes
		#				is_subject = yes
		#			}
		#		}
		#		country_event = { id = kr.political.80 hours = 3 }
		#		every_country = {
		#			limit = { is_exiled_in = ROOT }
		#			country_event = { id = kr.political.80 hours = 3 }
		#		}
		#	}

			# transfer the navy if set to
			if = {
				limit = { has_variable = transfer_navy_to }
				if = {
					limit = {
						country_exists = var:transfer_navy_to
						FROM = { is_ally_with = var:transfer_navy_to }
					}
					var:transfer_navy_to = {
						ROOT = { transfer_navy = { target = PREV } }
					}
				}
				clear_variable = transfer_navy_to
			}
		}
	}


	#ROOT is winner #FROM gets annexed - This fires just before FROM gets annexed, meaning the country and everything it owns still exists. It will also fire on_annex and on_civil_war_end
	on_civil_war_end_before_annexation = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_civil_war_end_before_annexation FROM = [From.GetName]"
		}
	}
	on_civil_war_end = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_civil_war_end FROM = [From.GetName]"
			if = {
				limit = {
					has_country_flag = had_elections
					has_elections = no
				}
				clr_country_flag = had_elections
				set_politics = {
					ruling_party = var:ROOT.current_party_ideology_group
					elections_allowed = yes
				}
			}
		}
	}

	#Root is exile
	#From is new host
	#FromFrom is old host
	on_host_changed_from_capitulation = {
		effect = {
			#Transfer exile leaders to new host
			From.From = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					set_nationality = Root.From
				}
			}
		}
	}

	#Root is exile
	#From is old host
	on_exile_government_reinstated = {
		effect = {
			From = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					set_nationality = Root
				}
			}
			Root = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					remove_unit_leader_trait = exiled_leader
					remove_exile_tag = yes
				}
			}
		}
	}

	on_war = {
		effect = {
			log = "[GetDateText]: [Root.GetName]: on_war"
			# Check for puppets at war with their overlord
			if = {
				limit = {
					is_subject = yes
					any_enemy_country = { has_subject = ROOT }
				}
				overlord = {
					set_autonomy = {
						target = ROOT
						autonomy_state = autonomy_free
					}
				}
			}
		}
	}

	#ROOT = attacking side
	#FROM = defending side
	#fired when two countries end up at war with each other (on_war is fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first)
	on_war_relation_added = {
		effect = {
			log = "[GetDateText]: on_war_relation_added attacker: [Root.GetName] defender: [From.GetName]"

			#TEMP WORKAROUND FOR ENGINE BUG: subjects cannot call their own subjects into wars
			if = {
				limit = {
					is_subject = yes
					num_subjects > 0
				}
				every_subject_country = {
					limit = { NOT = { has_war_with = FROM } }
					add_to_war = {
						targeted_alliance = ROOT
						enemy = FROM
					}
				}
			}
			FROM = {
				if = {
					limit = {
						is_subject = yes
						num_subjects > 0
					}
					every_subject_country = {
						limit = { NOT = { has_war_with = ROOT } }
						add_to_war = {
							targeted_alliance = FROM
							enemy = ROOT
						}
					}
				}
			}
		}
	}
}

